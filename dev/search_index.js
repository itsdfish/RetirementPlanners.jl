var documenterSearchIndex = {"docs":
[{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#Abstact-Types","page":"API","title":"Abstact Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AbstractGBM\nAbstractModel\nAbstractState\nAbstractLogger","category":"page"},{"location":"api/#RetirementPlanners.AbstractGBM","page":"API","title":"RetirementPlanners.AbstractGBM","text":"AbstractGBM <: ContinuousUnivariateDistribution\n\nAbstract type for simulating investment growth using Geometric Brownian Motion. \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractModel","page":"API","title":"RetirementPlanners.AbstractModel","text":"AbstractModel\n\nAn abstract model type for simulating retirement investments.\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractState","page":"API","title":"RetirementPlanners.AbstractState","text":"AbstractState\n\nAn abstract type for tracking the state of the model during simulation.     \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractLogger","page":"API","title":"RetirementPlanners.AbstractLogger","text":"AbstractLogger\n\nAn abstract type for recording the state of the model during simulation.     \n\n\n\n\n\n","category":"type"},{"location":"api/#Concrete-Types","page":"API","title":"Concrete Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GBM\nModel\nState\nLogger","category":"page"},{"location":"api/#RetirementPlanners.GBM","page":"API","title":"RetirementPlanners.GBM","text":"GBM{T<:Real} <: AbstractGBM\n\nA distribution object for Geometric Brownian Motion (GBM), which is used to model  growth of stocks. \n\nFields\n\nμ::T: growth rate\nσ::T: volitility in growth rate \nx0::T: initial value of stock \nx::T: current value\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.Model","page":"API","title":"RetirementPlanners.Model","text":"Model{S} <: AbstractModel\n\nThe default retirement simulation Model. \n\nFields\n\nΔt::Float64: the time step of the simulation in years\nduration::Float64: the duration of the simulation in years\nstart_age::Float64: age at the beginning of the simulation\nstart_amount::Float64: initial investment amount \nstate::S: the current state of the system \nwithdraw!: a function called on each time step to withdraw from investments \ninvest!: a function called on each time step to invest money into investments \nupdate_income!: a function called on each time step to update income sources \nupdate_inflation!: a function called on each time step to compute inflation \nupdate_interest!: a function called on each time step to compute interest on investments\nupdate_net_worth!: a function called on each time step to compute net worth \nlog!: a function called on each time step to log data\n\nConstructor\n\nModel(;\n        Δt,\n        duration,\n        start_age,\n        start_amount,\n        state = State(),\n        withdraw! = variable_withdraw,\n        invest! = variable_invest,\n        update_income! = variable_income,\n        update_inflation! = dynamic_inflation,\n        update_interest! = dynamic_interest,\n        update_net_worth! = default_net_worth,\n        log! = default_log!\n    )\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.State","page":"API","title":"RetirementPlanners.State","text":"State <: AbstractState\n\nRepresents the state of the model, which is updated on each iteration. \n\nFields\n\ninterest_rate::Float64: interest rate of investment during the current time period \ninflation_rate::Float64: the inflation rate during the current time period \nincome_amount::Float64: income during the current time period from various sources, e.g., social    security, pension, etc.\ninvest_amount::Float64: the amount invested during the current time period \nwithdraw_amount::Float64: the amount deducted from investments during the current time period \nnet_worth::Float64: total value of the investment during the current time period \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.Logger","page":"API","title":"RetirementPlanners.Logger","text":"Logger{T<:Real} <: AbstractLogger\n\nAn object for storing variables of the simulation. \n\nFields\n\nnet_worth::Array{T,2}: total value of investments\ninterest::Array{T,2}: growth rate of investment \ninflation::Array{T,2}: inflation rate \n\nIn each array above, rows are time steps and columns are repetitions of the simulation. \n\n\n\n\n\n","category":"type"},{"location":"api/#Methods","page":"API","title":"Methods","text":"","category":"section"},{"location":"api/#General-Methods","page":"API","title":"General Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"get_times\ngrid_search\nis_event_time\nrand\nsimulate!\nupdate!","category":"page"},{"location":"api/#RetirementPlanners.get_times","page":"API","title":"RetirementPlanners.get_times","text":"get_times(model::AbstractModel)\n\nReturns the time steps used in the simulation. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.grid_search","page":"API","title":"RetirementPlanners.grid_search","text":"grid_search(\n    model::AbstractModel,\n    Logger::Type{<:AbstractLogger},\n    n_reps; \n    config::NamedTuple,\n    threaded::Bool = false,\n    n = 1,\n    show_progress::Bool = false,\n    yoked_values = (),\n    kwargs...,\n)\n\nPerforms a grid search over vectorized inputs specified in the configuration setup. As an example, consider the following configuration setup:\n\nconfig = (\n    # withdraw parameters \n    kw_withdraw = (\n        distribution = [\n            Normal(3000, 1000), \n            Normal(4000, 1000),\n        ],\n        start_age = 65,\n    ),\n    # invest parameters\n    kw_invest = (\n        distribution = [\n            Normal(1000, 100),\n            Normal(1500, 100),\n        ]\n        end_age = 65,\n    ),\n    # interest parameters\n    kw_interest = (\n        gbm = GBM(; μ = .07, σ = .05),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        gbm = GBM(; μ = .035, σ = .005),\n    )\n)\n\nIn the example above, four simulations will be performed: one for each combination of withdraw distribution and investment distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract model type for performing Monte Carlo simulations of investment scenarios\nLogger::Type{<:AbstractLogger}: a type for collecting variables of the simulation. The constructor signature is   Logger(; n_reps, n_steps)\nn_reps: the number of times the investiment simulation is repeated for each input combination. \n\nKeywords\n\nconfig::NamedTuple: a nested configuration of the simulation parameters. \nthreaded::Bool = false: runs simulations on separate threads if true \nshow_progress::Bool = false: shows progress bar if true\nyoked_values = (): fix specified inputs to have the same values, such as:    [Pair((:kw_withdraw, :start_age), (:kw_invest, :end_age))]\n\nOutput\n\nReturns a vector of tuples where each tuple corresponds to the result of a single simulation condition. Each  tuple consists of input values and output results. The function to_dataframe can be used to transform output  into a long-form DataFrame.\n\nNotes\n\nThis function was inspired by parmscan in Agents.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.is_event_time","page":"API","title":"RetirementPlanners.is_event_time","text":"is_event_time(model::AbstractModel, t, rate)\n\nIndicate whether it is time for a periodic event to occur.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time (or age) in years\nrate: the interval between repeating events measured in years \n\n\n\n\n\n","category":"function"},{"location":"api/#Base.rand","page":"API","title":"Base.rand","text":"rand(dist::AbstractGBM, n_steps, n_reps; Δt)\n\nSimulate a random trajector of a Geometric Brownian motion process. \n\nArguments\n\ndist::GBM: a distribution object for Geometric Brownian Motion \nn_steps: the number of discrete time steps in the simulation \nn_reps: the number of times the simulation is repeated \n\nKeywords\n\nΔt: the time step for Geometric Brownian Motion\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.simulate!","page":"API","title":"RetirementPlanners.simulate!","text":"simulate!(\n    model::AbstractModel,\n    logger::AbstractLogger,\n    n_reps;\n    kwargs...\n)\n\nSimulate the a retirement scenario a specified number of times. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nlogger::AbstractLogger: an object for storing variables of the simulation\nn_reps: the number of times to repeat the Monte Carlo simulation\n\nKeywords\n\nkwargs...: optional keyword arguments passed to update!\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.update!","page":"API","title":"RetirementPlanners.update!","text":"update!(\n    model::AbstractModel,\n    logger::AbstractLogger,\n    step,\n    rep,\n    t; \n    kw_income=(),\n    kw_withdraw=(),\n    kw_invest=(),\n    kw_inflation=(),\n    kw_interest=(),\n    kw_net_worth=(),\n    kw_log=()\n)\n\nPerforms an update on each time step by calling the following functions defined in model:\n\nupdate_income!: update sources of income, such as social security, pension etc. \nwithdraw!: withdraw money\ninvest!: invest money\nupdate_inflation!: compute inflation\nupdate_interest!: compute interest \nupdate_net_worth!: compute net worth for the time step \nlog!: log desired variables \n\nEach function except log! has the signature my_func(model, t; kwargs...). The function log! has the signature  log!(model, logger, step, rep; kwargs...). \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nrep::Int: repetition count of simulation \ntime_step::Int: time step count of simulation \nt: time in years \n\nKeywords\n\nkw_income = (): optional keyword arguments passed to update_income!\nkw_withdraw = (): optional keyword arguments passed to withdraw!\nkw_invest = (): optional keyword arguments passed to invest!\nkw_inflation = (): optional keyword arguments passed to update_inflation!\nkw_interest = (): optional keyword arguments passed to update_interest! \nkw_net_worth = (): optional keyword arguments passed to update_net_worth!\nkw_log = (): optional keyword arguments passed to log!\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Methods","page":"API","title":"Update Methods","text":"","category":"section"},{"location":"api/#Update-Income","page":"API","title":"Update Income","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_income\nvariable_income","category":"page"},{"location":"api/#RetirementPlanners.fixed_income","page":"API","title":"RetirementPlanners.fixed_income","text":"fixed_income(\n    model::AbstractModel,\n    t;\n    income_amount = 1500.0,\n    start_age = 67.0\n)\n\nRecieve a fixed amount of income (e.g., social security, pension) per time step\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nincome_amount = 1500.0: the amount contributed to investments per time step\nstart_age = 67.0: the age at which investing stops \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_income","page":"API","title":"RetirementPlanners.variable_income","text":"variable_income(\n    model::AbstractModel, \n    t; \n    start_age = 67,\n    distribution = Normal(1500,300)\n)\n\nRecieves variable income (e.g., social security, pension) per time step based on the  sepcified distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nstart_age = 67: the age at which income begins to be recieved\ndistribution=Normal(1500,300): distribution from which income is recieved on each time step\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Inflation","page":"API","title":"Update Inflation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_inflation\nvariable_inflation\ndynamic_inflation","category":"page"},{"location":"api/#RetirementPlanners.fixed_inflation","page":"API","title":"RetirementPlanners.fixed_inflation","text":"fixed_inflation(\n    model::AbstractModel, \n    t;\n    inflation_rate = .03\n)\n\nReturns a fixed inflation rate of a specified value.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninflation_rate = .03: a constant rate of inflation per year\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_inflation","page":"API","title":"RetirementPlanners.variable_inflation","text":"variable_inflation(\n    model::AbstractModel,\n    t;\n    distribution = Normal(.03, .01)\n)\n\nReturns an interest rate sampled from a specified distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ndistribution = Normal(.03, .01): the distribution of inflation per year \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.dynamic_inflation","page":"API","title":"RetirementPlanners.dynamic_inflation","text":"dynamic_inflation(\n    model::AbstractModel, \n    t; \n    gbm = GBM(; μ=.03, σ=.01, x0=1)\n)\n\nModels inflation in the stock market as a geometric brownian motion processes. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeyword\n\ngbm = GBM(; μ=.03, σ=.01, x0=1): a geometric brownian motion object with parameters \n\nμ reflecting mean growth rate, and σ reflecting volitility in growth rate. The parameter x0 sets an arbitrary scale. \n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Interest","page":"API","title":"Update Interest","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_interest\nvariable_interest\ndynamic_interest","category":"page"},{"location":"api/#RetirementPlanners.fixed_interest","page":"API","title":"RetirementPlanners.fixed_interest","text":"fixed_interest(model::AbstractModel, t; interest_rate = .07)\n\nReturns a fixed interesting rate using a specified value.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninterest_rate = .07: a constant rate of investment growth per year\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_interest","page":"API","title":"RetirementPlanners.variable_interest","text":"variable_interest(\n    model::AbstractModel,\n    t;\n    distribution = Normal(.07, .05)\n)\n\nReturns interest rate sampled from a specified distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ndistribution = Normal(.07, .05): the distribution of interest per year \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.dynamic_interest","page":"API","title":"RetirementPlanners.dynamic_interest","text":"dynamic_interest(\n    model::AbstractModel,\n    t; \n    gbm = GBM(; μ=.07, σ=.05, x0=1)\n)\n\nModels interest in the stock market as a geometric brownian motion processes. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeyword\n\ngbm = GBM(; μ=.07, σ=.05, x0=1): a geometric brownian motion object with parameters \n\nμ reflecting mean growth rate, and σ reflecting volitility in growth rate. The parameter x0 sets an arbitrary scale. \n\nrebalance_rate = Inf: the time elapsed in years between rebalacing the portfolio. Not applicable \n\nto GBM\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Investments","page":"API","title":"Update Investments","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_investment\nvariable_investment","category":"page"},{"location":"api/#RetirementPlanners.fixed_investment","page":"API","title":"RetirementPlanners.fixed_investment","text":"fixed_investment(\n    model::AbstractModel, \n    t;\n    invest_amount = 1000.0,\n    end_age = 67.0\n)\n\nContribute a fixed amount into investments per time step.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninvest_amount = 3000.0: the amount contributed to investments per time step\nstart_age = 67.0: the age at which investing stops \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_investment","page":"API","title":"RetirementPlanners.variable_investment","text":"variable_investment(\n    model::AbstractModel,\n    t; \n    end_age = 67.0, \n    distribution = Normal(1000, 200)\n)\n\nContribute a variable amount into investments per time step using the specifed distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nend_age = 67.0: the age at which investing stops \ndistribution = Normal(1000, 200): the distribution from which the investment amount is sampled\n\n\n\n\n\n","category":"function"},{"location":"api/#Log","page":"API","title":"Log","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"default_log!","category":"page"},{"location":"api/#RetirementPlanners.default_log!","page":"API","title":"RetirementPlanners.default_log!","text":"default_log!(\n    model::AbstractModel,\n    logger,\n    step,\n    rep;\n    _...\n)\n\nLogs the following information on each time step of each simulation repetition:\n\nnet worth\ninterest rate\ninflation rate\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nlogger: a logger object\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Net-Worth","page":"API","title":"Update Net Worth","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"default_net_worth","category":"page"},{"location":"api/#RetirementPlanners.default_net_worth","page":"API","title":"RetirementPlanners.default_net_worth","text":"default_net_worth(model::AbstractModel, t)\n\nComputes net worth for the current time step as follows:\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Withdraw","page":"API","title":"Update Withdraw","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_withdraw\nvariable_withdraw","category":"page"},{"location":"api/#RetirementPlanners.fixed_withdraw","page":"API","title":"RetirementPlanners.fixed_withdraw","text":"fixed_withdraw(\n    model::AbstractModel,\n    t;\n    withdraw_amount = 3000.0,\n    start_age = 67.0\n)\n\nWithdraw a fixed amount from investments per time step once retirement starts.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nwithdraw_amount = 3000.0: the amount withdrawn from investments per time step\nstart_age = 67.0: the age at which withdraws begin \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_withdraw","page":"API","title":"RetirementPlanners.variable_withdraw","text":"variable_withdraw(\n    model::AbstractModel,\n    t;\n    start_age = 67, \n    distribution = Normal(2500, 500)\n)\n\nWithdraw a variable amount from investments per time step once retirement starts using a specifed  distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nstart_age = 67: the age at which withdraws begin \ndistribution = Normal(2500, 500): the distribution of withdraws per time step\n\n\n\n\n\n","category":"function"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"using Distributions\nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"intermediate_example/#Overview","page":"Intermediate Example","title":"Overview","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"This example builds upon the basic example and attempts to overcome some of its limitations. The primary limitation with the basic example is that it lacked the means to capture uncertainy in future events, such as interest rates, and the amount withdrawn from investments during retirement. To capture the inherent uncertainty of future events, we will sample these quantities from specified distributions. In so doing, we will be able to stress test the retirement plan under a wide variety of uncertain scenarios to determine the survival probability as a function of time. This will allow us to answer questions, such as what is the chance of running out of money after 20 years?","category":"page"},{"location":"intermediate_example/#Example","page":"Intermediate Example","title":"Example","text":"","category":"section"},{"location":"intermediate_example/#Load-Packages","page":"Intermediate Example","title":"Load Packages","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The first step is to load the packages required for simulating a retirement scenario and analyzing the results. In the code block below, we will load RetirementPlanners to run the simulation, Distributions to make the simulation stochastic, and Plots to plot the results of the simulation. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"using Distributions \nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"intermediate_example/#Create-Model","page":"Intermediate Example","title":"Create Model","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The Model object defines the parameters and behavior of the retirement investment simulation. As in the basic example, you must enter a value for the following keyword parameters:","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"Δt: the time step in years \nstart_age: the age of the person at the beginning of the simulation\nduration: the number of years to simulate\nstart_amount: the amount of money in investments at the beginning of the simulation","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"In this example, we will use the same timing paramers used in the basic example: we will assume you start saving for retirement at age 25 with a modest initial amount of $10,000. The simulation will update on a monthy basis and continue for 55 years until you reach age 80. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"model = Model(;\n    Δt = 1 / 12,\n    start_age = 25,\n    duration = 55,\n    start_amount = 10_000,\n    withdraw! = variable_withdraw,\n    invest! = variable_investment,\n    update_income! = variable_income,\n    update_inflation! = variable_inflation,\n    update_interest! = variable_interest \n)","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The function names are prefixed with variable to signify that they allow us to introduce variability in the simulation behavior by sampling relevant quantities from distributions specified by the user. The distribution can be any univariate distribution defined in Distributions.jl. In cases where the desired distribution is not available in Distributions.jl, you may use their API to create custom distribution types. You can find more details on these update functions in the API or by typing ? function_name in the the REPL. ","category":"page"},{"location":"intermediate_example/#Configure-Update-Options","page":"Intermediate Example","title":"Configure Update Options","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"We will specify the parameters of the update function in a nested configuration data structure, which passes keyword arguments to their corresponding update funtions. The configuration data structure is a nested NamedTuple (i.e., immutable keyword-value pairs), where the keywords in the first level correspond to the keyword inputs of the update functions. For example, the keyword kw_invest (short for keyword invest) is a set of keywords passed to the function fixed_investment.","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The configuration data structure below defines distributions over quanties, such as investment and withdraw amount. Aside from drawling random values from probability distributions, the simulation is the same as that described in the basic example.","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The mean monthly investment follows a normal distribution with a mean of $2,000 and a standard deviation of $500 to reflect fluctuations in income and expenses. As before, investments are made until an early retirement at age 40. The yearly interest rate on investments has a mean of .08 with a large standard deviation of .08 to reflect inherent volitility in the stock market. The yearly inflation rate has a mean of .035 and a standard deviation of .015. Upon retirement at age 40, we assume that you withdraw $2,200 per month with a standard deviation of $500 to reflect fluctuation in monthly expenses. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"config = (\n    # invest parameters\n    kw_invest = (\n        distribution = Normal(2000, 500),\n        end_age = 40,\n    ),\n    # interest parameters\n    kw_interest = (\n        distribution = Normal(.08, .08),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        distribution = Normal(.035, .015),\n    ),\n    # withdraw parameters \n    kw_withdraw = (\n        distribution = Normal(2200, 500),\n        start_age = 40,\n    )\n)","category":"page"},{"location":"intermediate_example/#Setup-Logger","page":"Intermediate Example","title":"Setup Logger","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The next step is to initialize the data logger. On each time step, the data logger stores the following quantities: annualized interest rate, annualized inflation rate, and net worth. The Logger object requires two inputs: n_steps: the total number of time steps in one simulation, and n_reps: the total repetitions of the simulation. The total number of time steps can be found by getting the length of the time steps. In this simple scenario, we will repeat the simulation 10,000 times to provide a stable estimate of the variability in the investment and retirement conditions. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"times = get_times(model)\nn_steps = length(times)\nn_reps = 10_000\nlogger = Logger(;n_reps, n_steps)","category":"page"},{"location":"intermediate_example/#Run-Simulation","page":"Intermediate Example","title":"Run Simulation","text":"","category":"section"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"Now that we have specified the parameters of the simulation, we can use the function simulate! to generate retirement numbers and save them to the Logger object. As shown below, simulate! requires our model object, the logger, and the number of repetitions. The optional configuration object is passed as a variable keyword using ; config..., which maps the nested keywords in the NamedTuple to the corresponding keywords defined in the simulate! method signature. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"simulate!(model, logger, n_reps; config...)","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The code block below plots five simulation runs. As you can see, there is marked variability between the simulation runs, particularly during the retirement phase following peak net worth. ","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"plot(times, logger.net_worth[:,1:5], xlabel=\"Age\", \n    leg=false, ylabel=\"Net Worth\")","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"One way to assess the robustness of a retirement plan is to compute the probability of survival (e.g., having net worth greater than zero) at each time point. The code block below illustrates how to compute and plot the survival probability.","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"survival_probs = mean(logger.net_worth .> 0, dims=2)\nplot(times, survival_probs, leg=false, grid=false, xlabel=\"Age (years)\", \n    ylabel=\"Survival Probability\", ylims = (0,1.05))","category":"page"},{"location":"intermediate_example/","page":"Intermediate Example","title":"Intermediate Example","text":"The plot above reveals that the survival probability drops rapidly around age 70, reaching about 25% at age 80. Depending on your life expectancy and risk tolerance, you might want to adjust some parameters of your retirement plan: perhaps working more years and/or investing more money.","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"using DataFrames\nusing Distributions\nusing Random\nusing RetirementPlanners\nusing StatsPlots","category":"page"},{"location":"advanced_example/#Overview","page":"Advanced Example","title":"Overview","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The goal of the advanced example is to demonstrate how to perform more complex Monte Carlo simulations of your retirement scenario. The advanced example will cover three new techniques:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"simulating plausible dynamics in the stock market\ncreating a custom update function to include a large, one-time expense at various time points\nperforming the simulation across multiple values of a parameter","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Adding these techniques to your toolkit will allow you to simulate more plausible retirement simulations, customize the behavior of the simulation to address your own questions and goals, and systematically compare different scenarios conveniently within the same code. ","category":"page"},{"location":"advanced_example/#Example","page":"Advanced Example","title":"Example","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The advanced example builds upon the intermediate example, making three changes outlined above. ","category":"page"},{"location":"advanced_example/#Load-Packages","page":"Advanced Example","title":"Load Packages","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The first step is to load the packages required for simulating a retirement scenario and analyzing the results. In the code block below, we will load RetirementPlanners to run the simulation, Distributions to make the simulation stochastic, and StatsPlots to plot the results of the simulation. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"using DataFrames\nusing Distributions\nusing Random\nusing RetirementPlanners\nusing StatsPlots\n\nRandom.seed!(574)","category":"page"},{"location":"advanced_example/#Create-Model","page":"Advanced Example","title":"Create Model","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The Model object defines the parameters and behavior of the retirement investment simulation. As in the basic example, you must enter a value for the following keyword parameters:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Δt: the time step in years \nstart_age: the age of the person at the beginning of the simulation\nduration: the number of years to simulate\nstart_amount: the amount of money in investments at the beginning of the simulation","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this example, we will use the same timing paramers used in the basic example: we will assume you start saving for retirement at age 25 with a modest initial amount of $10,000. The simulation will update on a monthy basis and continue for 55 years until you reach age 80. ","category":"page"},{"location":"advanced_example/#Withdraw","page":"Advanced Example","title":"Withdraw","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The withdraw function below extends the variable_withdraw function from the intermediate example by allowing us to specify the amount and timing of a one-time large expense. The keyword arguments for custom_withdraw are defined as follows:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"start_age: the age in years at which regular monthly withdraws begin \nage_at_expense: the age in years at which the one-time expense occurs\nexpense: the amount of the expense in dollars \ndistribution: the distribution of regular monthly withdraw amounts","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The function custom_withdraw has two basic parts based on the top-level if statement. The first part of the if statement implements the logic for the large one-time expense. The second part implements the logic for the regular monthly withdraw. Notice that the one-time expense and monthly withdraw are mutually exclusive rather than additive. Changing this logic is possible, but does not have much of an effect on the simulation results. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"function custom_withdraw(\n        model::AbstractModel, \n        t;\n        start_age, \n        age_at_expense,\n        expense,\n        distribution\n    )\n    # make withdraw for major expense if possible\n    if age_at_expense ≈ t\n        model.state.withdraw_amount = expense\n        if model.state.net_worth < expense\n            model.state.withdraw_amount = model.state.net_worth\n        else\n            model.state.withdraw_amount = expense\n        end\n    # after specified start age, with draw random amount. Otherwise, no withdraw.\n    elseif start_age ≤ t \n        withdraw_amount = rand(distribution)\n        if model.state.net_worth < withdraw_amount\n            model.state.withdraw_amount = model.state.net_worth\n        else\n            model.state.withdraw_amount = withdraw_amount\n        end\n    else \n        model.state.withdraw_amount = 0.0\n    end\n    return nothing\nend","category":"page"},{"location":"advanced_example/#Investment","page":"Advanced Example","title":"Investment","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Following the intermediate example, we will use the variable_investment function to control investment behavior in the simulation. To account for fluctuations in income and expenses, variable_investment allows us to specify a distribution of investment amounts rather than fixed investment amount.  ","category":"page"},{"location":"advanced_example/#Interest","page":"Advanced Example","title":"Interest","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this example, we will simulate growth the stock market using a stochastic process model called Geometric Brownian Motion (GBM). One advantage of GBM is that it provides a more accurate description of the temporal dynamics of stock market growth: the value of the stock market is noisy, but current value depends on the previous value.  Below, we will use the function dynamic_interest to simulate stock market growth with the GBM. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Brownian motion component of GBM is based on random movement of particles in space when no force is present to move the particles in a specific direction. Although particle physics seems disconnected from stock market behavior, it turns out to be a reasonable model because there is inherent randomness in stock prices as well as a general tendency to grow. If we add a growth rate parameter to Brownian motion and force the price to change proportially to its current value, the result is the GBM. The stochastic differential equation for the GBM is given by:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"X(t) = X(t) mu dt + s sqrtdt","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"where X(t) is the stock market value at time t, dt is the infintesimal time step,  mu is the average growth rate, and s sim mathrmnormal(0sigma) is normally distributed noise with standard deviation sigma. The stochastic differential equation has two terms:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"mu dt: represents the average growth rate of the stock market. \ns sqrtdt: represents the diffusion or jitter in the growth rate, which sometimes causes the price to increase or decrease more than the average growth rate. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"An important implication of multipling the two terms on the right hand side by X(t) is that growth and volitiliy scale with the current price, and the price cannot be negative. The code block below illustrates how to simulate and plot 10 trajectories of the GBM. The growth rate is mu=07 with a standard deviation of sigma=07, indicating moderately high volitility. In the simulation, the step size is 1 day and the trajectories generated from the model span 10 years.  ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"gdm = GBM(; μ = .07, σ = .07)\ntrajectories = rand(gdm, 365 * 10, 10; Δt = 1 / 365)\nplot(trajectories, leg=false, grid=false)","category":"page"},{"location":"advanced_example/#Inflation","page":"Advanced Example","title":"Inflation","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In the example below, we will also use the GBM to simulate inflation in the economy. The primary difference will be the values assigned to the parameters mu and sigma. The function for using the GMB as a model of inflation is dynamic_inflation.","category":"page"},{"location":"advanced_example/#Model","page":"Advanced Example","title":"Model","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"All of the assumptions described above are encoded into the model object in the code block below. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"model = Model(;\n    Δt = 1 / 12,\n    start_age = 25,\n    duration = 55,\n    start_amount = 10_000,\n    withdraw! = custom_withdraw,\n    invest! = variable_investment,\n    update_income! = variable_income,\n    update_inflation! = dynamic_inflation,\n    update_interest! = dynamic_interest \n)","category":"page"},{"location":"advanced_example/#Configure-Update-Options","page":"Advanced Example","title":"Configure Update Options","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Now that we have defined the basic components of the Monte Carlo simulation model, we will specify the parameters of the update functions. ","category":"page"},{"location":"advanced_example/#Investment-2","page":"Advanced Example","title":"Investment","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"As in the intermediate example, the mean monthly investment follows a normal distribution with a mean of $2,000 and a standard deviation of $500 to reflect fluctuations in income and expenses. As before, investments are made until an early retirement at age 40.","category":"page"},{"location":"advanced_example/#Withdraw-2","page":"Advanced Example","title":"Withdraw","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Upon retirement at age 40, we again assume that you withdraw $2,200 per month with a standard deviation of $500 to reflect fluctuation in monthly expenses. However, we assume that there is a large expense of $15,000 at age 30 in one simulation and at age 60 in the others. To perform a grid search over these values, we wrap them in a vector as follows: age_at_expense = [30,60]. It is worth noting that in principle we can vary additional factors in the simulation, such as the large expense amount, or the investment distribution. For the sake of simplicity, we will only vary age-at-expense to observe its impact on the survival probabilities across time. ","category":"page"},{"location":"advanced_example/#Interest-2","page":"Advanced Example","title":"Interest","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Unlike the previous examples, we will use the Geometric Brownian Motion (GBM) process to simulate growth in the stock market and inflation in the monetary system. We will assume that the yearly growth rate on investments has a mean of .07 with a standard deviation of .05 to reflect inherent volitility in the stock market. ","category":"page"},{"location":"advanced_example/#Inflation-2","page":"Advanced Example","title":"Inflation","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Similarly, we will use GBM to simulate inflation in the economy. In so doing, we will assume a yearly inflation rate has a mean of .035 and a standard deviation of .005. All the assumptions specified above are specified in the config object below. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"config = (\n    # invest parameters\n    kw_invest = (\n        distribution = Normal(2000, 500),\n        end_age = 40,\n    ),\n    # interest parameters\n    kw_interest = (\n        gbm = GBM(; μ = .08, σ = .05),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        gbm = GBM(; μ = .035, σ = .005),\n    ),\n    # withdraw parameters \n    kw_withdraw = (\n        age_at_expense = [30,60],\n        expense = 15_000,\n        distribution = Normal(2200, 500),\n        start_age = 40,\n    )\n)","category":"page"},{"location":"advanced_example/#Run-Grid-Search","page":"Advanced Example","title":"Run Grid Search","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In the code block below, we will perform a grid search over the values for age-at-expense to see how it affects the survival probability of the retirement plan across time. As its name implies, this is performed with the function grid_search which takes as input the model object, the Logger object type, n_reps, and our simulation configuration object, config. Internally, grid_search calls simulate! for each value of age-at-expense. The second line in the code block converts the results to a DataFrame to make subsequent analysis and plotting easier. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"# perform the grid search for age_at_expense using 10_000 reps per condition\nresults = grid_search(model, Logger, 10_000; config)\n# convert output to data frame\ndf = to_dataframe(model, results)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"13200000×6 DataFrame\n      Row │ time     rep    net_worth      interest     inflation  withdraw_age_at_expense \n          │ Float64  Int64  Float64        Float64      Float64    Int64                   \n──────────┼────────────────────────────────────────────────────────────────────────────────\n        1 │ 25.0833      1  12839.3         0.168697    0.0256016                       30\n        2 │ 25.1667      1  14376.0        -0.0600889   0.0395033                       30\n        3 │ 25.25        1  16297.6        -0.244519    0.0583386                       30\n        4 │ 25.3333      1  18628.6         0.160349    0.0499842                       30\n        5 │ 25.4167      1  20787.8         0.0607486   0.0499415                       30\n    ⋮     │    ⋮       ⋮          ⋮             ⋮           ⋮                 ⋮\n 13199997 │ 79.75    10000      6.48052e5  -0.189062    0.0411538                       60\n 13199998 │ 79.8333  10000      6.43572e5   0.00590992  0.044513                        60\n 13199999 │ 79.9167  10000      6.36921e5  -0.00792474  0.075874                        60\n 13200000 │ 80.0     10000      6.36214e5   0.0840805   0.0522622                       60\n                                                                      13199991 rows omitted","category":"page"},{"location":"advanced_example/#Survival-Analysis","page":"Advanced Example","title":"Survival Analysis","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this section, we will perform a survival analysis to determine the probability that the retirement plan will be successful (i.e., net worth > 0) as a function of time. The first step is to create a new indicator variable in the dataframe called survived, which is true if the net worth at time t is greater than zero, and is false otherwise. The subsequent line groups the dataframe according to the factors age-at-expense and time and computes the mean of each combination across all repetitions.  ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"# code surival at each time point as true or false\ndf.survived = df.net_worth .> 0\n# compute the surival probability as a function of age at expense and time\ndf_survival = combine(groupby(df, [:withdraw_age_at_expense,:time]), :survived => mean => :survival_prob)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"1320×3 DataFrame\n  Row │ withdraw_age_at_expense  time     survival_prob \n      │ Int64                    Float64  Float64       \n──────┼─────────────────────────────────────────────────\n    1 │                      30  25.0833         1.0\n    2 │                      30  25.1667         1.0\n    3 │                      30  25.25           1.0\n    4 │                      30  25.3333         1.0\n    5 │                      30  25.4167         1.0\n  ⋮   │            ⋮                ⋮           ⋮\n 1317 │                      60  79.75           0.5792\n 1318 │                      60  79.8333         0.577\n 1319 │                      60  79.9167         0.5754\n 1320 │                      60  80.0            0.5739\n                                       1311 rows omitted","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The code block below generates a plot of the survival probability as a function of time for each level of age-at-expse. As the plot shows, incurring the expense at age 30 reduces the surival probability compared to incurring the cost at age 60. As time continues, the difference in survival probability between the two levels increases. The primary reason is because early withdraw incurrs a larger opportunity cost for compounding interest. In this particular case, the impact was small to moderate, but the effect would be larger with a larger expense. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"@df df_survival plot(:time, :survival_prob, group=:withdraw_age_at_expense,\n    ylims=(0,1), legendtitle=\"Age at Expense\", grid=false, xlabel=\"Age\", \n    ylabel=\"Survival Probability\", legend=:bottomleft)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"(Image: )","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using Distributions\nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"plotting/#Plotting-Support","page":"Plotting","title":"Plotting Support","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Currently, RetirementPlanners.jl only provides one specialized plotting function. More plotting functionality might be included in the future. ","category":"page"},{"location":"plotting/#gradient_plot","page":"Plotting","title":"gradient_plot","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"In simulations involving hundreds or thousands of repetitions, it is not feasible to plot all trajectories of net worth due to overplotting. The function gradient_plot overcomes this challenge by representing variability as a density gradient, where darker regions correspond to more likely trajectories. gradient_plot is conditionally loaded into your active session when RetirementPlanners and Plots are loaded. The example below shows a gradient density plot for 1000 simulations with 10 individual trajectories optionally added through the keyword n_lines. The full set of code can be seen by expanding the hidden code under Show Code.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"<details>\n<summary><b>Show Code</b></summary>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"\nusing Distributions\nusing Plots\nusing Random\nusing RetirementPlanners\n\nRandom.seed!(535)\n\n# configuration options\nconfig = (\n    # withdraw parameters \n    kw_withdraw = (\n        distribution = Normal(4000, 1000),\n        start_age = 65,\n    ),\n    # invest parameters\n    kw_invest = (\n        distribution = Normal(1200, 300),\n        end_age = 65,\n    ),\n    # interest parameters\n    kw_interest = (\n        gbm = GBM(; μ = .07, σ = .05),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        gbm = GBM(; μ = .035, σ = .005),\n    )\n)\n\n# setup retirement model\nmodel = Model(;\n    Δt = 1 / 12,\n    start_age = 32.0,\n    duration = 55.0,\n    start_amount = 10_000.0,\n    withdraw! = variable_withdraw,\n    invest! = variable_investment,\n    update_inflation! = dynamic_inflation,\n    update_interest! = dynamic_interest,\n)\n\ntimes = get_times(model)\nn_reps = 1000\nn_steps = length(times)\nlogger = Logger(;n_steps, n_reps)\nsimulate!(model, logger, n_reps; config...);\n","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"</details>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"plot_gradient(times, logger.net_worth; xlabel=\"Age\", ylabel=\"Net Worth\", n_lines = 10)","category":"page"},{"location":"plotting/#Sensitivity-Plot","page":"Plotting","title":"Sensitivity Plot","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"In many cases, it is informative to perform a sensitivity analysis of your retirement strategy. For example, you might want to know to what extent your net worth varies according to changes in investment amount and duration. The function plot_sensitivity uses a contour plot visualize the effect of two variables on another variable. In the code block below, withdraw amount and invest amount are varied independently across a range of values and the survival probability at the end of the simulation is color coded from low in red to high in green. As you might expect, you are more likely run out of money by withdrawing more and investing less. The benefit of a sensitivity analysis is that it provides details about the magnitude of these changes. ","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"<details>\n<summary><b>Show Code</b></summary>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using Distributions\nusing Plots\nusing Random\nusing RetirementPlanners\n\nRandom.seed!(6522)\n\n# configuration options\nconfig = (\n    # withdraw parameters \n    kw_withdraw = (\n        withdraw_amount = [2000,2500,3000],\n        start_age = 65,\n    ),\n    # invest parameters\n    kw_invest = (\n        invest_amount = [1000,1500,2000,2500],\n        end_age = 65,\n    ),\n    # interest parameters\n    kw_interest = (\n        gbm = GBM(; μ = .07, σ = .05),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        gbm = GBM(; μ = .035, σ = .005),\n    )\n)\n\n# setup retirement model\nmodel = Model(;\n    Δt = 1 / 12,\n    start_age = 32.0,\n    duration = 55.0,\n    start_amount = 10_000.0,\n    withdraw! = fixed_withdraw,\n    invest! = fixed_investment,\n    update_inflation! = dynamic_inflation,\n    update_interest! = dynamic_interest,\n)\nn_reps = 1000\nresults = grid_search(model, Logger, n_reps; config)\ndf = to_dataframe(model, results)\ndf.survived = df.net_worth .> 0\n","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"</details>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"plot_sensitivity(df, [:withdraw_withdraw_amount,:invest_invest_amount], :survived,\n    xlabel = \"Withdrawn Amount\", ylabel = \"Invest Amount\", colorbar_title = \"Surival Probability\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Disclaimer\nMonte Carlo simulations are useful tools for stress testing financial/retirement plans under a wide range of uncertain conditions. As with any model, Monte Carlo simulations are only as good as the assumptions one makes. This package is not intended to be financial advice, but rather an open source tool for planning and research. When in doubt, seek the counsel of a professional financial planner. ","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RetirementPlanners.jl is a framework for performing Monte Carlo simulations of retirement investment performance under various assumptions specifed by the user. The primary goal of the framework is to provide a high degree of flexibility and customization while offering a set of user-friendly options from which users can choose. These goals are achieved as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package allows the user to tweak the investment simulations by selecting from a set of pre-defined update functions which have adjustable parameters.\nThe package allows the user to define custom update functions which integrate seamlessly with the API. \nThe package allows the user to perform a grid search over simulation parameters to systematically explore their effects on outcome variables, such as net worth.","category":"page"},{"location":"#How-does-it-work?","page":"Home","title":"How does it work?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RetirementPlanners.jl performs a discrete time simulation, meaning the state of the system is updated at fixed time steps—typically, representing years or months. On each time step, the update! is called, and updates the system in a manner defined by the user. By default, update! calls seven subordinate functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"withdraw!: withdraw money\ninvest!: invest money\nupdate_income!: update sources of income, such as social security, pension etc. \nupdate_inflation!: compute inflation\nupdate_interest!: compute interest \nupdate_net_worth!: compute net worth \nlog!: log desired variables","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each function above is treated as a variable with default value that can be overwritten to suit your needs. There are two ways to overwrite the default functions: First, you can select a pre-defined function from those listed in the API. Second, you may define your own update functions as needed. ","category":"page"},{"location":"#Customization","page":"Home","title":"Customization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are three ways to customize your retirement investment simulation. From simplest to most complex, they are as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can select any combination of pre-defined update functions and modify their default parameter values.\nYou can define custom update functions to add new capabilities and have more fine-grained control over the behavior of the simulation.\nYou can create a new subtype of AbstractModel, which will allow you to extend the update! function. This will allow you to call a different set of functions than the seven update functions described above. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Of course, these are not mutually exclusive approaches. You may use any combination of the three approaches to create your desired retirement investment simulation. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are two methods for installing the package. Option 1 is to install without version control. In the REPL, use ] to switch to the package mode and enter the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/itsdfish/RetirementPlanners.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Option 2 is to install via a custom registry. The advantage of this approach is that you have more control over version control, expecially if you are using a project-specfic environment. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install the registry using the directions found here.\nAdd the package by typing ] into the REPL and then typing (or pasting):","category":"page"},{"location":"","page":"Home","title":"Home","text":"add RetirementPlanners","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"using Plots\nusing RetirementPlanners","category":"page"},{"location":"basic_example/#Overview","page":"Basic Example","title":"Overview","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The purpose of this example is to illustrate how to use RetirementPlanners.jl in a simple scenario. As such, the goal is to understand the API rather than create the most realistic simulation of investment performance. For more realistic examples, please read the documentation for intermediate example and advanced example. ","category":"page"},{"location":"basic_example/#Example","page":"Basic Example","title":"Example","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The example below uses simple functions for updating quanties such as inflation, interest, and net worth through out the simulation. Each update function has default parameter values which we will change. You can change the default functions either by selecting predefined functions described in the API, or by defining your own custom functions. ","category":"page"},{"location":"basic_example/#Load-Packages","page":"Basic Example","title":"Load Packages","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The first step is to load the packages required for simulating a retirement scenario and analyzing the results. With the keyword using, the code block below loads RetirementPlanners to run the simulation, and Plots to plot the results of the simulation. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"using Plots\nusing RetirementPlanners","category":"page"},{"location":"basic_example/#Create-Model","page":"Basic Example","title":"Create Model","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The code block below shows the minimum setup required to create a model object, which maintains various parameters of the simulation, including timing variables and update functions. You must enter a value for the following keyword parameters:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Δt: the time step in years \nstart_age: your age in years at the beginning of the simulation\nduration: the number of years to simulate\nstart_amount: the amount of money you have in investments at the beginning of the simulation","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"In this basic example, we will assume you start saving for retirement at age 25, and begin with a modest amount of $10,000. The simulation will update on a monthy basis and continue for 55 years until you reach age 80. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"model = Model(;\n    Δt = 1 / 12,\n    start_age = 25,\n    duration = 55,\n    start_amount = 10_000,\n    withdraw! = fixed_withdraw,\n    invest! = fixed_investment,\n    update_inflation! = fixed_inflation,\n    update_interest! = fixed_interest,\n)","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The output above summarizes the configuration of the Model object. First, we can see the provided inputs at the top of the table. The field called state stores current values of the system for each time step, including investment amount, and net worth. You can see the details of the State object by expanding the menu below.","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"<details>\n<summary><b>Show State</b></summary>","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"model.state","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"</details>","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The next seven fields in the Model object correspond to update functions called interally by a function called update!. For simplicity, we will use the following functions:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"fixed_withdraw: withdraw a fixed amount from investments on each time step starting at a specified age\nfixed_investment: invest a fixed amount on each time step until a specified age is reached\nfixed_income: recieve a fixed income (e.g., social security, or pension) on each time step starting at a specified age\nfixed_inflation: a fixed yearly inflation rate used to adjust interest (i.e., growth) earned on investments\nfixed_interest: a fixed yearly interest rate earned on intestments \ndefault_net_worth: computes net worth on each time step based on inflation, interest, investments, and withdraws. \nlog!: records interest rate, inflation rate, and net worth on each time step","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"You can view additional documentation for the update functions above via ? function_name in the REPL, or referencing the API.","category":"page"},{"location":"basic_example/#Configure-Update-Options","page":"Basic Example","title":"Configure Update Options","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The seven update functions described above include default input values for relevant quantities, such as interest rate on investments. However, you can optionally overwrite the default values by passing a configuration data structure to the function simulate!, as described below. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The configuration data structure is a nested NamedTuple (i.e., immutable keyword-value pairs), where the keywords in the first level correspond to the keyword inputs of the update functions. For example, the keyword kw_invest (short for keyword invest) is a set of keywords passed to the function fixed_investment.","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"In our running scenario, we will assume that you invest $2,000 each month until early retirement at age 40. The yearly interest rate on investments is .08, which is inflation adjusted by a yearly rate of .035. Upon reaching 40 years old, we will assume you will draw $2,200 per month.  ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"config = (\n    # invest parameters\n    kw_invest = (\n        invest_amount = 2000.0,\n        end_age = 40,\n    ),\n    # interest parameters\n    kw_interest = (\n        interest_rate = .08,\n    ),\n    # inflation parameters\n    kw_inflation = (\n        inflation_rate = .035,\n    ),\n    # withdraw parameters \n    kw_withdraw = (\n        withdraw_amount = 2200.0,\n        start_age = 40,\n    )\n)","category":"page"},{"location":"basic_example/#Setup-Logger","page":"Basic Example","title":"Setup Logger","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The next step is to initialize the data logger. On each time step, the data logger stores the following quantities: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"annualized interest rate\nannualized inflation rate\nnet worth. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The Logger object requires two inputs: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"n_steps: the total number of time steps in one simulation\nn_reps: the total repetitions of the simulation. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The total number of time steps can be found by getting the length of the time steps. In this simple scenario, we will set n_reps=1 because the simulation is deterministic (i.e., it provides the same result each time). ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"times = get_times(model)\nn_steps = length(times)\nn_reps = 1\nlogger = Logger(;n_reps, n_steps)","category":"page"},{"location":"basic_example/#Run-Simulation","page":"Basic Example","title":"Run Simulation","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Now that we have specified the parameters of the simulation, we can use the function simulate! to generate retirement numbers and save them to the Logger object. As shown below, simulate! requires our Model object, Logger object, and the number of repetitions. The optional configuration object is passed as a variable keyword using ; config..., which maps the nested keywords in the NamedTuple to the corresponding keywords defined in the simulate! method signature. Those NamedTuples are then passed to the appropriate update functions. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"simulate!(model, logger, n_reps; config...)","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The code block below plots net worth as a function of age. The time steps are contained in times and net worth is contained within the Logger object. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"plot(times, logger.net_worth, grid=false, xlabel=\"Age\", ylabel=\"Net Worth\")","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Based on the assumptions we have made, you will have $263,027 remaining in investments at age 80. Needless to say, this simulation is too simplistic to be of much use. Perhaps the most significant limitation is that is deterministic: investments, withdraws, infation, and interest are fixed throughout. In actuality, these values vary across time, thus introducing uncertainty into the planning process. The intermediate example and the advanced example make progress towards overcoming these limitations.","category":"page"}]
}
