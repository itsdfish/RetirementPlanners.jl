var documenterSearchIndex = {"docs":
[{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#Abstact-Types","page":"API","title":"Abstact Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The abstract types below can be extended to add new functionality.","category":"page"},{"location":"api/","page":"API","title":"API","text":"AbstractGBM\nAbstractLogger\nAbstractModel\nAbstractState\nAbstractTransaction","category":"page"},{"location":"api/#RetirementPlanners.AbstractGBM","page":"API","title":"RetirementPlanners.AbstractGBM","text":"AbstractGBM <: ContinuousUnivariateDistribution\n\nAbstract type for simulating investment growth using Geometric Brownian Motion. \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractLogger","page":"API","title":"RetirementPlanners.AbstractLogger","text":"AbstractLogger\n\nAn abstract type for recording the state of the model during simulation.     \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractModel","page":"API","title":"RetirementPlanners.AbstractModel","text":"AbstractModel\n\nAn abstract model type for simulating retirement investments.\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractState","page":"API","title":"RetirementPlanners.AbstractState","text":"AbstractState\n\nAn abstract type for tracking the state of the model during simulation.     \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.AbstractTransaction","page":"API","title":"RetirementPlanners.AbstractTransaction","text":"AbstractTransaction{T, D}\n\nAn abstract type for scheduling transactions. \n\n\n\n\n\n","category":"type"},{"location":"api/#Concrete-Types","page":"API","title":"Concrete Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GBM\nVarGBM\nMvGBM\nModel\nState\nLogger\nTransaction","category":"page"},{"location":"api/#RetirementPlanners.GBM","page":"API","title":"RetirementPlanners.GBM","text":"GBM{T <: Real} <: AbstractGBM\n\nA distribution object for Geometric Brownian Motion (GBM), which is used to model  growth of stocks. \n\nFields\n\nμ::T: growth rate\nσ::T: volitility in growth rate\nμᵣ::T: growth rate during recession \nσᵣ::T: volitility in growth rate during recession \nx0::T: initial value of stock \nx::T: current value\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.VarGBM","page":"API","title":"RetirementPlanners.VarGBM","text":"VarGBM{T <: Real} <: AbstractGBM\n\nA distribution object for variable Geometric Brownian Motion (vGBM), which is used to model  growth of stocks. Unlike GBM, vGBM selects growth rate (μ) and volitility (σ) parameters from a normal distribution on each simulation run to capture uncertainy in these parameters. \n\nFields\n\nμ::T: growth rate sampled from normal distribution\nσ::T: volitility in growth rate during, sampled from truncated normal distribution\nμᵣ::T: growth rate during a recession sampled from normal distribution\nσᵣ::T: volitility in growth rate during a recession, sampled from truncated normal distribution\nαμ::T: mean of growth rate distribution \nασ::T: mean of volitility of growth rate distribution \nημ::T: standard deviation of growth rate distribution \nησ::T: standard deviation of volitility of growth rate distribution \nαμ::T: mean of growth rate distribution during a recession\nασ::T: mean of volitility of growth rate distribution during a recession\nημ::T: standard deviation of growth rate distribution during a recession\nησ::T: standard deviation of volitility of growth rate distribution during a recession \nx0::T: initial value of stock \nx::T: current value\n\nConstructor\n\nVarGBM(; αμ, ασ, ημ, ησ, x0=1.0, x=x0)\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.MvGBM","page":"API","title":"RetirementPlanners.MvGBM","text":"MvGBM{T <: Real} <: AbstractGBM\n\nA distribution object for Multivariate Geometric Brownian Motion (MvGBM), which is used to model  growth of multiple stocks and bonds. \n\nFields\n\nμ::Vector{T}: growth rates\nσ::Vector{T}: volitility in growth rates \nx0::Vector{T}: initial value of stocks\nx::Vector{T}: value of stocks \nratios::Vector{T}: allocation proportion of stocks/bonds\nρ::Array{T, 2}: correlation matrix between stocks/bonds \nΣ::Array{T, 2}: covariance matrix between stocks/bonds \n\nConstructor\n\nMvGBM(; μ, σ, ρ, ratios)\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.Model","page":"API","title":"RetirementPlanners.Model","text":"Model{S, T<:Real} <: AbstractModel\n\nThe default retirement simulation Model. \n\nFields\n\nΔt::T: the time step of the simulation in years\nduration::T: the duration of the simulation in years\nstart_age::T: age at the beginning of the simulation\nstart_amount::T: initial investment amount \nstate::S: the current state of the system \nwithdraw!: a function called on each time step to withdraw from investments \ninvest!: a function called on each time step to invest money into investments \nupdate_income!: a function called on each time step to update income sources \nupdate_inflation!: a function called on each time step to compute inflation \nupdate_market!: a function called on each time step to compute interest on investments\nupdate_investments!: a function called on each time step to compute net worth \nlog!: a function called on each time step to log data\n\nConstructor\n\nModel(;\n    Δt,\n    duration,\n    start_age,\n    start_amount,\n    state = State(),\n    withdraw! = withdraw!,\n    invest! = invest!,\n    update_income! = update_income!,\n    update_inflation! = dynamic_inflation,\n    update_market! = dynamic_market,\n    update_investments! = update_investments!,\n    log! = default_log!,\n    config...\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.State","page":"API","title":"RetirementPlanners.State","text":"State{T<:Real} <: AbstractState\n\nRepresents the state of the model, which is updated on each iteration. \n\nFields\n\ninterest_rate::T: interest rate of investment during the current time period \ninflation_rate::T: the inflation rate during the current time period \nincome_amount::T: income during the current time period from various sources, e.g., social    security, pension, etc.\ninvest_amount::T: the amount invested during the current time period \nwithdraw_amount::T: the amount deducted from investments during the current time period \nnet_worth::T: total value of the investment during the current time period \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.Logger","page":"API","title":"RetirementPlanners.Logger","text":"Logger{T <: Real} <: AbstractLogger\n\nAn object for storing variables of the simulation. \n\nFields\n\nnet_worth::Array{T, 2}: total value of investments\ninterest::Array{T, 2}: growth rate of investment \ninflation::Array{T, 2}: inflation rate \ntotal_income::Array{T, 2}: income from investment withdraws, social security etc.\n\nIn each array above, rows are time steps and columns are repetitions of the simulation. \n\n\n\n\n\n","category":"type"},{"location":"api/#RetirementPlanners.Transaction","page":"API","title":"RetirementPlanners.Transaction","text":"Transaction{T, D} <: AbstractTransaction{T, D}\n\nSpecifies the time range and amount of a transaction. \n\nFields\n\nstart_age = 0.0: the age at which a series of transactions begin\nend_age = Inf: the age at which a series of transactions end\namount: the amount of each transaction\n\nConstructor\n\nTransaction(; start_age = 0.0, end_age = Inf, amount)\n\n\n\n\n\n","category":"type"},{"location":"api/#Methods","page":"API","title":"Methods","text":"","category":"section"},{"location":"api/#General-Methods","page":"API","title":"General Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"get_times\ngrid_search\nis_event_time\nrand\nsimulate!\ntransact\nupdate!","category":"page"},{"location":"api/#RetirementPlanners.get_times","page":"API","title":"RetirementPlanners.get_times","text":"get_times(model::AbstractModel)\n\nReturns the time steps used in the simulation. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.grid_search","page":"API","title":"RetirementPlanners.grid_search","text":"grid_search(\n    model_type::Type{<:AbstractModel},\n    Logger::Type{<:AbstractLogger},\n    n_reps,\n    all_args;\n    threaded::Bool = false,\n    show_progress::Bool = false,\n    yoked_values = ()\n)\n\nPerforms a grid search over vectorized inputs specified in the configuration setup. As an example, consider the following configuration setup:\n\nconfig = (\n    Δt = 1 / 12,\n    start_age = 30.,\n    duration = 55.0,\n    start_amount = 10_000.0,\n    # withdraw parameters \n    kw_withdraw = (\n        distribution = [\n            Normal(3000, 1000), \n            Normal(4000, 1000),\n        ],\n        start_age = 65,\n    ),\n    # invest parameters\n    kw_invest = (\n        distribution = [\n            Normal(1000, 100),\n            Normal(1500, 100),\n        ]\n        end_age = 65,\n    ),\n    # interest parameters\n    kw_market = (\n        gbm = GBM(; μ = .07, σ = .05),\n    ),\n    # inflation parameters\n    kw_inflation = (\n        gbm = GBM(; μ = .035, σ = .005),\n    )\n)\n\nIn the example above, four simulations will be performed: one for each combination of withdraw distribution and investment distribution.\n\nArguments\n\nmodel_type::Type{<:AbstractModel}: an abstract model type for performing Monte Carlo simulations of investment scenarios\nLogger::Type{<:AbstractLogger}: a type for collecting variables of the simulation. The constructor signature is   Logger(; n_reps, n_steps)\nn_reps: the number of times the investiment simulation is repeated for each input combination. \nall_args: a NamedTuple of configuration settings\n\nKeywords\n\nthreaded::Bool = false: runs simulations on separate threads if true \nshow_progress::Bool = false: shows progress bar if true\nyoked_values = (): fix specified inputs to have the same values, such as:    [Pair((:kw_withdraw, :start_age), (:kw_invest, :end_age))]\n\nOutput\n\nReturns a vector of tuples where each tuple corresponds to the result of a single simulation condition. Each  tuple consists of input values and output results. The function to_dataframe can be used to transform output  into a long-form DataFrame.\n\nNotes\n\nThis function was inspired by parmscan in Agents.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.is_event_time","page":"API","title":"RetirementPlanners.is_event_time","text":"is_event_time(model::AbstractModel, t, rate)\n\nIndicate whether it is time for a periodic event to occur.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time (or age) in years\nrate: the interval between repeating events measured in years \n\n\n\n\n\n","category":"function"},{"location":"api/#Base.rand","page":"API","title":"Base.rand","text":"rand(dist::AbstractGBM, n_steps, n_reps; Δt)\n\nSimulate a random trajectory of a Geometric Brownian motion process. \n\nArguments\n\ndist::AbstractGBM: a distribution object for Geometric Brownian Motion \nn_steps: the number of discrete time steps in the simulation \nn_reps: the number of times the simulation is repeated \n\nKeywords\n\nΔt: the time step for Geometric Brownian Motion\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.simulate!","page":"API","title":"RetirementPlanners.simulate!","text":"simulate!(model::AbstractModel, logger::AbstractLogger, n_reps)\n\nSimulate the a retirement scenario a specified number of times. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nlogger::AbstractLogger: an object for storing variables of the simulation\nn_reps: the number of times to repeat the Monte Carlo simulation\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.transact","page":"API","title":"RetirementPlanners.transact","text":"transact(\n    model::AbstractModel,\n    income::Transaction{T, D};\n    t\n) where {T, D <: Distribution}\n\nSample a amount from a specified distribution and execute a transaction. \n\nArguments\n\n::AbstractModel: unused model object \ninvestment::Transaction{T, D}: a transaction object specifing an investment rule\n\nKeywords\n\nt: the current time\n\n\n\n\n\ntransact(\n    model::AbstractModel,\n    income::Transaction{T, D};\n    t\n) where {T, D <: NominalAmount}\n\nExecute a transaction using the nominal value of the transaction amount. \n\nArguments\n\n::AbstractModel: unused model object \ninvestment::Transaction{T, D}: a transaction object specifing an investment rule\n\nKeywords\n\nt: the current time\n\n\n\n\n\ntransact(\n    ::AbstractModel,\n    investment::Transaction{T, D};\n    t\n) where {T, D <: AdaptiveInvestment}\n\nExecute an adaptive investment transaction in which the real invested amount increased until reaching  a peak earning potential. \n\nArguments\n\n::AbstractModel: unused model object \ninvestment::Transaction{T, D}: a transaction object specifing an investment rule\n\nKeywords\n\nt: the current time\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.update!","page":"API","title":"RetirementPlanners.update!","text":"update!(model::AbstractModel, logger::AbstractLogger, step, rep, t)\n\nPerforms an update on each time step by calling the following functions defined in model:\n\nupdate_inflation!: compute inflation\nupdate_market!: compute interest \ninvest!: invest money\nwithdraw!: withdraw money\nupdate_income!: update sources of income, such as social security, pension etc. \nupdate_investments!: compute net worth for the time step \nlog!: log desired variables \n\nEach function except log! has the signature my_func(model, t; kwargs...). The function log! has the signature  log!(model, logger, step, rep; kwargs...). \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nrep::Int: repetition count of simulation \ntime_step::Int: time step count of simulation \nt: time in years \n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Methods","page":"API","title":"Update Methods","text":"","category":"section"},{"location":"api/#Update-Income","page":"API","title":"Update Income","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"update_income!","category":"page"},{"location":"api/#RetirementPlanners.update_income!","page":"API","title":"RetirementPlanners.update_income!","text":"update_income!(\n    model::AbstractModel,\n    t;\n    income_sources = Transaction(0.0, -1.0, 0.0)\n)\n\nRecieve income from specified sources on each time step, as indicated by income_sources.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nincome_sources = Transaction(0.0, -1.0, 0.0): a transaction or vector of transactions indicating the amount and time period   of income recieved per time step \n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Inflation","page":"API","title":"Update Inflation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_inflation\nvariable_inflation\ndynamic_inflation","category":"page"},{"location":"api/#RetirementPlanners.fixed_inflation","page":"API","title":"RetirementPlanners.fixed_inflation","text":"fixed_inflation(\n    model::AbstractModel, \n    t;\n    inflation_rate = .03\n)\n\nReturns a fixed inflation rate of a specified value.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninflation_rate = .03: a constant rate of inflation per year\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_inflation","page":"API","title":"RetirementPlanners.variable_inflation","text":"variable_inflation(\n    model::AbstractModel,\n    t;\n    distribution = Normal(.03, .01)\n)\n\nReturns an interest rate sampled from a specified distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ndistribution = Normal(.03, .01): the distribution of inflation per year \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.dynamic_inflation","page":"API","title":"RetirementPlanners.dynamic_inflation","text":"dynamic_inflation(\n    model::AbstractModel, \n    t; \n    gbm = GBM(; μ=.03, σ=.01, x0=1),\n    kwargs...\n)\n\nModels inflation in the stock market as a geometric brownian motion process. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeyword\n\ngbm = GBM(; μ=.03, σ=.01, x0=1): a geometric brownian motion object with parameters    μ reflecting mean growth rate, and σ reflecting volitility in growth rate. The parameter x0   sets an arbitrary scale. The function also supports VarGBM. \nkwargs...: optional keyword arguments passed to increment!\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Interest","page":"API","title":"Update Interest","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fixed_market\nvariable_market\ndynamic_market","category":"page"},{"location":"api/#RetirementPlanners.fixed_market","page":"API","title":"RetirementPlanners.fixed_market","text":"fixed_market(model::AbstractModel, t; interest_rate = .07)\n\nReturns a fixed interesting rate using a specified value.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninterest_rate = .07: a constant rate of investment growth per year\n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.variable_market","page":"API","title":"RetirementPlanners.variable_market","text":"variable_market(\n    model::AbstractModel,\n    t;\n    distribution = Normal(.07, .05)\n)\n\nReturns interest rate sampled from a specified distribution.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ndistribution = Normal(.07, .05): the distribution of interest per year \n\n\n\n\n\n","category":"function"},{"location":"api/#RetirementPlanners.dynamic_market","page":"API","title":"RetirementPlanners.dynamic_market","text":"dynamic_market(\n    model::AbstractModel,\n    t;\n    rebalance_rate = Inf,\n    gbm = GBM(; μ = 0.07, σ = 0.05, x0 = 1),\n    kwargs...\n)\n\nModels the stock market as a geometric brownian motion process. \n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeyword\n\ngbm = GBM(; μ=.07, σ=.05, x0=1): a geometric Brownian motion object with parameters    μ reflecting mean growth rate, and σ reflecting volitility in growth rate. The parameter x0   sets an arbitrary scale. Other variations of geometric Brownian motion can be used, including VarGBM and    MvGBM\nrebalance_rate = Inf: the time elapsed in years between rebalacing the portfolio. Not applicable    to GBM\nkwargs...: optional keyword arguments passed to increment!\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Investments","page":"API","title":"Update Investments","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"invest!","category":"page"},{"location":"api/#RetirementPlanners.invest!","page":"API","title":"RetirementPlanners.invest!","text":"invest!(\n    model::AbstractModel,\n    t;\n    investments = Transaction(0.0, -1.0, 0.0),\n    real_growth = 0.0,\n    peak_age = 45\n)\n\nContribute a specified amount into investments on each time step.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\ninvestments = Transaction(0.0, -1.0, 0.0): a transaction or vector of transactions indicating the time frame and amount to invest\n\n\n\n\n\n","category":"function"},{"location":"api/#Log","page":"API","title":"Log","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"default_log!","category":"page"},{"location":"api/#RetirementPlanners.default_log!","page":"API","title":"RetirementPlanners.default_log!","text":"default_log!(model::AbstractModel, logger, step, rep; _...)\n\nLogs the following information on each time step of each simulation repetition:\n\nnet worth\ninterest rate\ninflation rate\ntotal_income\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nlogger: a logger object\n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Investments-2","page":"API","title":"Update Investments","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"update_investments!","category":"page"},{"location":"api/#RetirementPlanners.update_investments!","page":"API","title":"RetirementPlanners.update_investments!","text":"update_investments!(model::AbstractModel, t)\n\nComputes net worth for the current time step as follows:\n\nwithdraw money\ncontribute money\nmultiply by real growth rate.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\n\n\n\n\n","category":"function"},{"location":"api/#Update-Withdraw","page":"API","title":"Update Withdraw","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"withdraw!","category":"page"},{"location":"api/#RetirementPlanners.withdraw!","page":"API","title":"RetirementPlanners.withdraw!","text":"withdraw!(\n    model::AbstractModel,\n    t;\n    withdraws = Transaction(0.0, -1.0, 0.0)\n)\n\nSchedules withdraws from investments as specified in withdraws.\n\nArguments\n\nmodel::AbstractModel: an abstract Model object \nt: current time of simulation in years \n\nKeywords\n\nwithdraws = Transaction(0.0, -1.0, 0.0): a transaction or vector of transactions indicating the amount and time period   in which money is withdrawn from investments per time step \n\n\n\n\n\n","category":"function"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"using Distributions\nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"advanced_example/#Overview","page":"Advanced Example","title":"Overview","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The goal of this example is to illustrate how to setup a realistic simulation to stress test your retirement plan. This example builds upon the basic example and attempts to overcome some of its limitations. The primary limitation with the basic example is its failure to capture uncertainty in various quantaties, such as interest rates, and the amount withdrawn from investments during retirement. To capture the inherent uncertainty of future events, we will sample these quantities from specified distributions. In so doing, we will be able to stress test the retirement plan under a wide variety of uncertain scenarios to determine the survival probability as a function of time. This will allow us to answer questions, such as what is the chance of running out of money after 20 years?","category":"page"},{"location":"advanced_example/#Example","page":"Advanced Example","title":"Example","text":"","category":"section"},{"location":"advanced_example/#Scenario","page":"Advanced Example","title":"Scenario","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this example, we will assume that you have completed the basic example and have a rudimentary understanding of the API. If that is not the case, please review the basic example before proceeding. We will use the same scenario described in the basic example, which is reproduced below for your convienence: ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Let's assume that you are 27 years old with an initial investment of $10,000, and you invest $625 each month until early retirement at age 60. Assume further that the yearly interest rate on investments is .07, and inflation is .035. Upon reaching 60 years old, we will assume you will withdraw $2,200 per month until reaching age 85.","category":"page"},{"location":"advanced_example/#Load-Packages","page":"Advanced Example","title":"Load Packages","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The first step is to load the required packages. In the code block below, we will load RetirementPlanners to run the retirement simulation, Distributions to make the simulation stochastic, and Plots to plot the results of the simulation. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"using Distributions \nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"advanced_example/#Configure-Update-Options","page":"Advanced Example","title":"Configure Update Options","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The configuration for the simulation is presented below. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (withdraws = Transaction(;\n        start_age = 60,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),),\n    # invest parameters\n    kw_invest = (investments = Transaction(;\n        start_age = 27,\n        end_age = 60,\n        amount = Normal(625, 100)\n    ),),\n    # interest parameters\n    kw_market = (\n        # dynamic model of the stock market\n        gbm = VarGBM(;\n            # non-recession parameters\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            # recession parameters\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Notice that many parameters are the same as those from the basic example. However, there are importance differences, which we will examine below. ","category":"page"},{"location":"advanced_example/#Adaptive-Withdraw","page":"Advanced Example","title":"Adaptive Withdraw","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this simulation, we will use the type AdaptiveWithdraw to specify the withdraw strategy. Rather than withdrawing a fixed amount each time step, AdaptiveWithdraw will withdraw more money during periods of high growth, subject to the contraint that a minimum required amount is withdrawn if funds permit.","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"AdaptiveWithdraw has the following fields:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"start_age: specifies age at which funds are withdrawn from the investments.\nincome_adjustment: allows you to subtract a portion of the your income (e.g., social security or pension) from the investment amount. Doing so, would provide the opportunity for the investments to grow. \npercent_of_real_growth: specifies the percent of real growth withdrawn. If real growth in one month was $6,000, and percent_of_real_growth = .5, the withdraw amount would be $3,000. However, the withdraw amount cannot be less than the amount specified by the parameter min_withdraw (unless the total investments are less than min_withdraw). \nvolitility controls the variability of the withdraw amount. The variance is proportional to the mean withdraw amount. ","category":"page"},{"location":"advanced_example/#Investment","page":"Advanced Example","title":"Investment","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In the advanced example, we will sample each investment contribution from a normal distribution to reflect fluctuations due to factors such as, unexpected expenses and bonuses. This is accomplished by setting the amount field of Transaction to Normal(μ, σ). Normal has the following parameters:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"μ: the average contribution\nσ: the standard deviation of the contribution","category":"page"},{"location":"advanced_example/#Interest","page":"Advanced Example","title":"Interest","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In this example, we will simulate growth the stock market using a stochastic process model called Geometric Brownian Motion (GBM). One advantage of GBM is that it provides a more accurate description of the temporal dynamics of stock market growth: the value of the stock market is noisy, but current value depends on the previous value.  Below, we will use the function dynamic_interest to simulate stock market growth with the GBM. A standard GBM has two parameters:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"μ: growth rate\nσ: volitility in growth rate","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"More information can be found by expanding the details option below.","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"<details>\n<summary><b>Show Details</b></summary>","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Brownian motion component of GBM is based on random movement of particles in space when no force is present to move the particles in a specific direction. Although particle physics seems disconnected from stock market behavior, it turns out to be a reasonable model because there is inherent randomness in stock prices as well as a general tendency to grow. If we add a growth rate parameter to Brownian motion and force the price to change proportially to its current value, the result is the GBM. The stochastic differential equation for the GBM is given by:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"X(t) = X(t) mu dt + s sqrtdt","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"where X(t) is the stock market value at time t, dt is the infintesimal time step,  mu is the average growth rate, and s sim mathrmnormal(0sigma) is normally distributed noise with standard deviation sigma. The stochastic differential equation has two terms:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"mu dt: represents the average growth rate of the stock market. \ns sqrtdt: represents the diffusion or jitter in the growth rate, which sometimes causes the price to increase or decrease more than the average growth rate. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"An important implication of multipling the two terms on the right hand side by X(t) is that growth and volitiliy scale with the current price, and the price cannot be negative. The code block below illustrates how to simulate and plot 10 trajectories of the GBM. The growth rate is mu=07 with a standard deviation of sigma=07, indicating moderately high volitility. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"</details>","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The figure below shows 10 example trajectories of GBM over a 10 year period. The average growth rate is 10% with moderate volitility of 7%. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"gdm = GBM(; μ = .10, σ = .07)\ntrajectories = rand(gdm, 365 * 10, 10; Δt = 1 / 365)\nplot(trajectories, leg=false, grid=false)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Although we set parameters μ and σ to plausible values, there are other plausible values we could have selected. Setting μ to .07 is reasonable (albiet somewhat pessimistic), but setting μ to .11 would be reasonable also. In an effort to account for uncertainty in growth rate and volitility, we will use a variation of GBM in which μ and σ are sampled from a distribution for each simulation of a 58 year period. VarGBM has four required parameters:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"αμ: mean of growth rate distribution\nασ: mean of volitility of growth rate distribution\nημ: standard deviation of growth rate distribution\nησ: standard deviation of volitility of growth rate distribution","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"In addition, you may optionally specify corresponding parameters for periods of recession: αμᵣ, ημᵣ, ασᵣ, ησᵣ. One advantage of specifying the timing of recessions manually is to examine sequence of return risk. The timing of a recession is important because it is more difficult to recover if it occurs near the beginning of retirement. The time and duration of a recession can be specified by passing a dictionary called recession. Note that recessions may emerge naturally from GBM under suitible parameters. ","category":"page"},{"location":"advanced_example/#Create-Model-Object","page":"Advanced Example","title":"Create Model Object","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Now that we have configured the parameters of the simulation, we are now in the position to create the model object:","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"model = Model(; config...)","category":"page"},{"location":"advanced_example/#Setup-Logger","page":"Advanced Example","title":"Setup Logger","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"The next step is to initialize the data logger. On each time step, the data logger stores the following quantities: annualized interest rate, annualized inflation rate, and net worth. The Logger object requires two inputs: n_steps: the total number of time steps in one simulation, and n_reps: the total repetitions of the simulation. The total number of time steps can be found by getting the length of the time steps. In this simple scenario, we will repeat the simulation 10,000 times to provide a stable estimate of the variability in the investment and retirement conditions. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"times = get_times(model)\nn_reps = 1000\nn_steps = length(times)\nlogger = Logger(; n_steps, n_reps)","category":"page"},{"location":"advanced_example/#Run-Simulation","page":"Advanced Example","title":"Run Simulation","text":"","category":"section"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"Now that we have specified the parameters of the simulation, we can use the function simulate! to generate retirement numbers and save them to the Logger object. As shown below, simulate! requires our model object, the logger, and the number of repetitions. ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"simulate!(model, logger, n_reps)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"One of the biggest changes from the basic example is the use of random values for withdraw and interest. In the code block below, we will use the function plot_gradient to represent variability in networth projections. Darker values correspond to higher density or more likely trajectories.   ","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"<details>\n<summary><b>Show Details</b></summary>","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"survival_probs = mean(logger.net_worth .> 0, dims = 2)\nsurvival_plot = plot(\n    times,\n    survival_probs,\n    leg = false,\n    xlabel = \"Age\",\n    grid = false,\n    ylabel = \"Survival Probability\",\n    xlims = (config.kw_withdraw.withdraws.start_age, times[end]),\n    ylims = (0.5, 1.05),\n    color = :black\n)\n\n# networth as a function of time. Darker shading indicates more likely values\nnet_worth_plot = plot_gradient(\n    times,\n    logger.net_worth;\n    xlabel = \"Age\",\n    ylabel = \"Investment Value\",\n    n_lines = 0\n)\n\n# growth rate distribution across repetitions of the simulation \ngrowth = logger.interest[:]\ninterest_plot = histogram(\n    growth,\n    norm = true,\n    xlabel = \"Market Growth\",\n    ylabel = \"Density\",\n    color = RGB(148 / 255, 173 / 255, 144 / 255),\n    bins = 100,\n    label = false,\n    grid = false,\n    xlims = (-0.7, 0.7)\n)\nvline!(\n    interest_plot,\n    [0.0],\n    color = :black,\n    linewidth = 1.5,\n    linestyle = :dash,\n    label = false\n)\n\n# income as a function of time. \nincome_plot = plot_gradient(\n    times,\n    logger.total_income;\n    xlabel = \"Age\",\n    ylabel = \"Total Income\",\n    xlims = (config.kw_withdraw.withdraws.start_age, times[end]),\n    n_lines = 0,\n    color = :blue\n)","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"</details>","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"plot(survival_plot, net_worth_plot, interest_plot, income_plot, layout = (2, 2))","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"<details>\n<summary><b>All Code</b></summary>","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"###############################################################################################################\n#                                           load dependencies\n###############################################################################################################\ncd(@__DIR__)\nusing Pkg\nPkg.activate(\"..\")\nusing Distributions\nusing Plots\nusing RetirementPlanners\n###############################################################################################################\n#                                           setup simulation\n###############################################################################################################\n# montly contribution \ncontribution = (50_000 / 12) * 0.15\n# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (withdraws = Transaction(;\n        start_age = 60,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),),\n    # invest parameters\n    kw_invest = (investments = Transaction(;\n        start_age = 27,\n        end_age = 60,\n        amount = Normal(contribution, 100)\n    ),),\n    # interest parameters\n    kw_market = (\n        # dynamic model of the stock market\n        gbm = VarGBM(;\n            # non-recession parameters\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            # recession parameters\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)\n# setup retirement model\nmodel = Model(; config...)\n###############################################################################################################\n#                                           run simulation\n###############################################################################################################\ntimes = get_times(model)\nn_reps = 1000\nn_steps = length(times)\nlogger = Logger(; n_steps, n_reps)\nsimulate!(model, logger, n_reps)\n###############################################################################################################\n#                                            plot results \n###############################################################################################################\n# plot of survival probability as a function of time\nsurvival_probs = mean(logger.net_worth .> 0, dims = 2)\nsurvival_plot = plot(\n    times,\n    survival_probs,\n    leg = false,\n    xlabel = \"Age\",\n    grid = false,\n    ylabel = \"Survival Probability\",\n    xlims = (config.kw_withdraw.withdraws.start_age, times[end]),\n    ylims = (0.5, 1.05),\n    color = :black\n)\n\n# networth as a function of time. Darker shading indicates more likely values\nnet_worth_plot = plot_gradient(\n    times,\n    logger.net_worth;\n    xlabel = \"Age\",\n    ylabel = \"Investment Value\",\n    n_lines = 0\n)\n\n# growth rate distribution across repetitions of the simulation \ngrowth = logger.interest[:]\ninterest_plot = histogram(\n    growth,\n    norm = true,\n    xlabel = \"Market Growth\",\n    ylabel = \"Density\",\n    color = RGB(148 / 255, 173 / 255, 144 / 255),\n    bins = 100,\n    label = false,\n    grid = false,\n    xlims = (-0.7, 0.7)\n)\nvline!(\n    interest_plot,\n    [0.0],\n    color = :black,\n    linewidth = 1.5,\n    linestyle = :dash,\n    label = false\n)\n\n# income as a function of time. \nincome_plot = plot_gradient(\n    times,\n    logger.total_income;\n    xlabel = \"Age\",\n    ylabel = \"Total Income\",\n    xlims = (config.kw_withdraw.withdraws.start_age, times[end]),\n    n_lines = 0,\n    color = :blue\n)\nplot(survival_plot, net_worth_plot, interest_plot, income_plot, layout = (2, 2))","category":"page"},{"location":"advanced_example/","page":"Advanced Example","title":"Advanced Example","text":"</details>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using Distributions\nusing Plots\nusing RetirementPlanners","category":"page"},{"location":"plotting/#Plotting-Support","page":"Plotting","title":"Plotting Support","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"Currently, RetirementPlanners.jl provides two specialized plotting functions: plot_gradient and plot_sensitivity. Each plotting function is illustrated below using the code detailed in the basic example and the advanced example. For ease of presentation, only key elements of the code are visible by default. The code to setup the simulation can be revealed by clicking on the arrow button. ","category":"page"},{"location":"plotting/#Gradient-Plot","page":"Plotting","title":"Gradient Plot","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"The function plot_gradient is used to plot the distribution of a quantity across time. Some examples include, net worth and total income. This functionality is useful in cases involving thousands of simulations, which would lead to overplotting. plot_gradient overcomes this challenge by representing variability as a density gradient, where darker regions correspond to more likely trajectories. plot_gradient is conditionally loaded into your active session when RetirementPlanners and Plots are loaded. The example below shows a gradient density plot for 1000 simulations. The full set of code can be seen by expanding the hidden code under Show Code.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"<details>\n<summary><b>Show Code</b></summary>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using Distributions\nusing Plots\nusing RetirementPlanners\n\n# montly contribution \ncontribution = (50_000 / 12) * 0.15\n# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (withdraws = Transaction(;\n        start_age = 60,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),),\n    # invest parameters\n    kw_invest = (investments = Transaction(;\n        start_age = 27,\n        end_age = 60,\n        amount = Normal(contribution, 100)\n    ),),\n    # interest parameters\n    kw_market = (\n        # dynamic model of the stock market\n        gbm = VarGBM(;\n            # non-recession parameters\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            # recession parameters\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)\n# setup retirement model\nmodel = Model(; config...)\ntimes = get_times(model)\nn_reps = 1000\nn_steps = length(times)\nlogger = Logger(; n_steps, n_reps)\nsimulate!(model, logger, n_reps)\n\n# plot of survival probability as a function of time\nsurvival_probs = mean(logger.net_worth .> 0, dims = 2)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"</details>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"income_plot = plot_gradient(\n    times,\n    logger.total_income;\n    xlabel = \"Age\",\n    ylabel = \"Total Income\",\n    xlims = (config.kw_withdraw.withdraws.start_age, times[end]),\n    n_lines = 0,\n    color = :blue\n)","category":"page"},{"location":"plotting/#Sensitivity-Plot","page":"Plotting","title":"Sensitivity Plot","text":"","category":"section"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"In many cases, it is informative to perform a sensitivity analysis of your retirement strategy. For example, you might want to know to what extent your net worth varies according to changes in investment amount and number of years investing. The function plot_sensitivity uses a contour plot visualize the effect of two variables on another variable.","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"In the code block below, invest amount and number of years investing are varied independently across a range of values and the survival probability at the end of the simulation is color coded from low in red to high in green. As you might expect, you are more likely run out of money by withdrawing more and investing less. The benefit of a sensitivity analysis is that it provides details about the magnitude of these changes. ","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"As shown in the configuration below, we specificy a vector of values for the variables we wish to vary. The configuration is passed to a function called grid_search, which runs the simulation for all combinations of the two variables. Click the arrow to reveal the details. ","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"# montly contribution \ncontribute(x, r) = (x / 12) * r\nsalary = 50_000\n\nwithdraws = map(\n    a -> Transaction(;\n        start_age = a,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),\n    55:65\n)\n\ninvestments = [\n    Transaction(; start_age = 27, end_age = a, amount = Normal(contribute(5e4, p), 100))\n    for p ∈ 0.10:0.05:0.30 for a ∈ 55:65\n]\n\n# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (; withdraws),\n    # invest parameters\n    kw_invest = (; investments),\n    # interest parameters\n    kw_market = (\n        gbm = VarGBM(;\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"<details>\n<summary><b>Show Code</b></summary>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"using DataFrames\nusing Distributions\nusing Random\nusing RetirementPlanners\nusing StatsPlots\n\nRandom.seed!(6522)\n# montly contribution \ncontribute(x, r) = (x / 12) * r\nsalary = 50_000\n\nwithdraws = map(\n    a -> Transaction(;\n        start_age = a,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),\n    55:65\n)\n\ninvestments = [\n    Transaction(; start_age = 27, end_age = a, amount = Normal(contribute(5e4, p), 100))\n    for p ∈ 0.10:0.05:0.30 for a ∈ 55:65\n]\n\n# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (; withdraws),\n    # invest parameters\n    kw_invest = (; investments),\n    # interest parameters\n    kw_market = (\n        gbm = VarGBM(;\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)\n\nyoked_values =\n    [Pair((:kw_withdraw, :withdraws, :start_age), (:kw_invest, :investments, :end_age))]\nresults = grid_search(Model, Logger, 1000, config; yoked_values);\ndf = to_dataframe(Model(; config...), results)\ndf.survived = df.net_worth .> 0\ndf.retirement_age = map(x -> x.end_age, df.invest_investments)\ndf.mean_investment = map(x -> x.amount.μ, df.invest_investments)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"</details>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"plot_sensitivity(\n    df,\n    [:retirement_age, :mean_investment],\n    :survived,\n    xlabel = \"Age\",\n    ylabel = \"Invest Amount\",\n    colorbar_title = \"Surival Probability\"\n)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"<details>\n<summary><b>All Code</b></summary>","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"###############################################################################################################\n#                                           load dependencies\n###############################################################################################################\ncd(@__DIR__)\nusing Pkg\nPkg.activate(\"..\")\nusing Distributions\nusing DataFrames\nusing Plots\nusing RetirementPlanners\nusing StatsPlots\n###############################################################################################################\n#                                           setup simulation\n###############################################################################################################\n# montly contribution \ncontribute(x, r) = (x / 12) * r\nsalary = 50_000\n\nwithdraws = map(\n    a -> Transaction(;\n        start_age = a,\n        amount = AdaptiveWithdraw(;\n            min_withdraw = 2200,\n            percent_of_real_growth = 0.15,\n            income_adjustment = 0.0,\n            volitility = 0.05\n        )\n    ),\n    55:65\n)\n\ninvestments = [\n    Transaction(; start_age = 27, end_age = a, amount = Normal(contribute(5e4, p), 100))\n    for p ∈ 0.10:0.05:0.30 for a ∈ 55:65\n]\n\n# configuration options\nconfig = (\n    # time step in years \n    Δt = 1 / 12,\n    # start age of simulation \n    start_age = 27,\n    # duration of simulation in years\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # withdraw parameters \n    kw_withdraw = (; withdraws),\n    # invest parameters\n    kw_invest = (; investments),\n    # interest parameters\n    kw_market = (\n        gbm = VarGBM(;\n            αμ = 0.070,\n            ημ = 0.010,\n            ασ = 0.035,\n            ησ = 0.010,\n            αμᵣ = -0.05,\n            ημᵣ = 0.010,\n            ασᵣ = 0.035,\n            ησᵣ = 0.010\n        ),\n        # recession: age => duration\n        recessions = Dict(0 => 0)\n    ),\n    # inflation parameters\n    kw_inflation = (gbm = VarGBM(; αμ = 0.035, ημ = 0.005, ασ = 0.005, ησ = 0.0025),),\n    # income parameters \n    kw_income = (income_sources = Transaction(; start_age = 67, amount = 2000),)\n)\n###############################################################################################################\n#                                           run simulation\n###############################################################################################################\nyoked_values =\n    [Pair((:kw_withdraw, :withdraws, :start_age), (:kw_invest, :investments, :end_age))]\nresults = grid_search(Model, Logger, 1000, config; yoked_values);\ndf = to_dataframe(Model(; config...), results)\ndf.survived = df.net_worth .> 0\ndf.retirement_age = map(x -> x.end_age, df.invest_investments)\ndf.mean_investment = map(x -> x.amount.μ, df.invest_investments)\ndf1 = combine(groupby(df, [:retirement_age, :mean_investment, :time]), :net_worth => mean)\ndf2 = combine(groupby(df, [:retirement_age, :mean_investment, :time]), :survived => mean)\n###############################################################################################################\n#                                            plot results \n###############################################################################################################\n@df df1 plot(\n    :time,\n    :net_worth_mean,\n    group = (:retirement_age, :mean_investment),\n    ylims = (0, 2e6),\n    legend = false,\n    legendtitle = \"withdraw age\",\n    grid = false,\n    xlabel = \"Age\",\n    ylabel = \"Mean Net Worth\"\n)\n\n@df df2 plot(\n    :time,\n    :survived_mean,\n    group = (:retirement_age, :mean_investment),\n    ylims = (0, 1),\n    grid = false,\n    xlabel = \"Age\",\n    layout = (4, 1),\n    legend = :bottomleft,\n    ylabel = \"Survival Probability\"\n)\n\nplot_sensitivity(\n    df,\n    [:retirement_age, :mean_investment],\n    :survived,\n    xlabel = \"Age\",\n    ylabel = \"Invest Amount\",\n    colorbar_title = \"Surival Probability\"\n)","category":"page"},{"location":"plotting/","page":"Plotting","title":"Plotting","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Disclaimer\nMonte Carlo simulations are useful tools for stress testing financial/retirement plans under a wide range of uncertain conditions. As with any model, Monte Carlo simulations are only as good as the assumptions one makes. This package is not intended to be financial advice, but rather an open source tool for planning and research. When in doubt, seek the counsel of a professional financial planner. ","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RetirementPlanners.jl is a framework for performing Monte Carlo simulations of retirement investment performance under various assumptions specifed by the user. The primary goal of the framework is to provide a high degree of flexibility and customization while offering a set of user-friendly options from which users can choose. These goals are achieved as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package allows the user to tweak the investment simulations by selecting from a set of pre-defined update functions which have adjustable parameters.\nThe package allows the user to define custom update functions which integrate seamlessly with the API. \nThe package allows the user to perform a grid search over simulation parameters to systematically explore their effects on outcome variables, such as net worth.","category":"page"},{"location":"#How-does-it-work?","page":"Home","title":"How does it work?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RetirementPlanners.jl performs a discrete time simulation, meaning the state of the system is updated at fixed time steps—typically, representing years or months. On each time step, the update! is called, and updates the system in a manner defined by the user. By default, update! calls seven subordinate functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"withdraw!: withdraw money\ninvest!: invest money\nupdate_income!: update sources of income, such as social security, pension etc. \nupdate_inflation!: compute inflation\nupdate_market!: simulate stock market \nupdate_investments!: compute total value of investments\nlog!: log desired variables","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each function above is treated as a variable with default value that can be overwritten to suit your needs. There are two ways to overwrite the default functions: First, you can select a pre-defined function from those listed in the API. Second, you may define your own update functions as needed. ","category":"page"},{"location":"#Customization","page":"Home","title":"Customization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are three ways to customize your retirement investment simulation. From simplest to most complex, they are as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can select any combination of pre-defined update functions and modify their default parameter values.\nYou can define custom update functions to add new capabilities and have more fine-grained control over the behavior of the simulation.\nYou can create a new subtype of AbstractModel, which will allow you to extend the update! function. This will allow you to call a different set of functions than the seven update functions described above. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Of course, these are not mutually exclusive approaches. You may use any combination of the three approaches to create your desired retirement investment simulation. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are two methods for installing the package. Option 1 is to install without version control. In the REPL, use ] to switch to the package mode and enter the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/itsdfish/RetirementPlanners.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Option 2 is to install via a custom registry. The advantage of this approach is greater version control through Julia's package management system. This entails two simple steps. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install the registry using the directions found here.\nAdd the package by typing ] into the REPL and then typing (or pasting):","category":"page"},{"location":"","page":"Home","title":"Home","text":"add RetirementPlanners","category":"page"},{"location":"","page":"Home","title":"Home","text":"I recommend adding the package to a project-specific environment and specifying version constraints in the Project.toml to ensure reproducibility. For an example, see the Project.toml file associated with this package.  ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"using Plots\nusing RetirementPlanners","category":"page"},{"location":"basic_example/#Overview","page":"Basic Example","title":"Overview","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The purpose of this example is to demonstrate how to use RetirementPlanners.jl with a simple, retirement simulation. Our focus on a simple simulation will have the benefit of making the API clear, but will not result in a valid stress test of your retirement plan. For a more realistic example, please read the documentation for the advanced example. ","category":"page"},{"location":"basic_example/#API","page":"Basic Example","title":"API","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"In this section, we will provide an overview of the API for configuring a retirement simulation. As detailed below, some parameters require user input, whereas other parameters have default values which can optionally be overwritten with your desired values. ","category":"page"},{"location":"basic_example/#Transaction","page":"Basic Example","title":"Transaction","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The transfer of money between accounts is scheduled through an object called Transaction, which contains the following fields:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"start_age = 0.0: the age at which a series of transactions begin\nend_age = Inf: the age at which a series of transactions end\namount: the amount of each transaction","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"To schedule multiple transactions across time, you may specify a vector of Transaction objects, which can be useful when, for example, you have multiple income sources occuring at different times (e.g., social security, pension, rent income etc.). The function transact will carry out the transaction at allowable times. By default, the RetirementPlanners supports transaction for real numbers, probability distributions, and a few adaptive rules described below. You can create your own type and method for transact to implement a custom strategy. ","category":"page"},{"location":"basic_example/#Required-Parameters","page":"Basic Example","title":"Required Parameters","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The model requires numerous parameters to control the timing of events and the initial value of the investment. The required parameters are as follows:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Δt: the time step in years \nstart_age: your age in years at the beginning of the simulation\nduration: the number of years to simulate\nstart_amount: the amount of money you have in investments at the beginning of the simulation","category":"page"},{"location":"basic_example/#Optional-Update-Functions","page":"Basic Example","title":"Optional Update Functions","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The discrete time simulation is governed by seven update functions, which are executed on each time step:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"withdraw!: a function called on each time step to withdraw from investments \ninvest!: a function called on each time step to invest money into investments \nupdate_income!: a function called on each time step to update income sources \nupdate_inflation!: a function called on each time step to compute inflation \nupdate_market!: a function called on each time step to simulate the stock market\nupdate_investments!: a function called on each time step to compute the total value of the investments\nlog!: a function called on each time step to log data","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Each function is assigned a default method with default arguments. You can specify alternative parameter values as well as alternative update functions. Note that in advanced applications, you can specify a new model type and update! to execute a different sequence of update functions. The update functions listed above will suffice for a wide range of use cases.","category":"page"},{"location":"basic_example/#Optional-Update-Function-Parameters","page":"Basic Example","title":"Optional Update Function Parameters","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Each update function described in the previous section has default parameter values which can be overwritten. For example, we could specify a set of parameters kw_income = (X₁ = x₁, X₂ = x₂, ..., Xₙ = xₙ) to pass the function update_income!. The keyword for each update function is given below: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"kw_income: optional keyword arguments passed to update_income!\nkw_withdraw: optional keyword arguments passed to withdraw!\nkw_invest: optional keyword arguments passed to invest!\nkw_inflation: optional keyword arguments passed to update_inflation!\nkw_interest: optional keyword arguments passed to update_market! \nkw_net_worth: optional keyword arguments passed to update_investments!\nkw_log: optional keyword arguments passed to log!","category":"page"},{"location":"basic_example/#Example","page":"Basic Example","title":"Example","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Now that we have explained the API for configuring simulations, we are now in the position to develop a simple retirement simulation based on the following scenario:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Let's assume that you are 27 years old with an initial investment of $10,000, and you invest $625 each month until early retirement at age 60. Assume further that the yearly interest rate on investments is .07, and inflation is .035. Upon reaching 60 years old, we will assume you will withdraw $2,200 per month until reaching age 85.","category":"page"},{"location":"basic_example/#Load-Packages","page":"Basic Example","title":"Load Packages","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The first step is to load the required packages. The code block below loads the package RetirementPlanners to configure and run the retirement simulation, and the package Plots to visualize the results. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"using RetirementPlanners\nusing Plots","category":"page"},{"location":"basic_example/#Configure-Simulation","page":"Basic Example","title":"Configure Simulation","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"In this section, we will configure the simulation based on the scenario described above. As shown below, all of the configuration details will be defined in a data structure named config.","category":"page"},{"location":"basic_example/#Required-Parameters-2","page":"Basic Example","title":"Required Parameters","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Based on the scenario above, we will use the following required parameters: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Δt: frac112\nstart_age: 27\nduration: 58\nstart_amount: $ 10000","category":"page"},{"location":"basic_example/#Optional-Update-Functions-2","page":"Basic Example","title":"Optional Update Functions","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"In this simple simulation, we use several, simple update functions pre-fixed with the word fixed. As the names suggest, these simplified functions use fixed quantities in the simulation. However, for update_investments! and log!, we will use the default update functions. Each update function is described below:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"fixed_withdraw: withdraw a fixed amount from investments on each time step starting at a specified age\ninvest!: invest a specified amount on each time step until a specified age is reached. In this case, we will invest a fixed     amount\nfixed_income: recieve specified income (e.g., social security, or pension) on each time step starting at a specified age\nfixed_inflation: a fixed yearly inflation rate used to adjust interest (i.e., growth) earned on investments\nfixed_interest: a fixed yearly interest rate earned on intestments \nupdate_investments!: computes total value of investments on each time step based on inflation, interest, investments, and withdraws. \ndefault_log!: records interest rate, inflation rate, and net worth on each time step","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Note: you can view additional documentation for the update functions above via ? function_name in the REPL, or by referencing the API.","category":"page"},{"location":"basic_example/#Optional-Update-Function-Parameters-2","page":"Basic Example","title":"Optional Update Function Parameters","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Putting all of this information together, we get the following configuration:","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"config = (\n    # time step in years\n    Δt = 1 / 12,\n    # starting age of simulation\n    start_age = 25,\n    # duration of simulation\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # function for simulating growth in the market\n    update_market! = fixed_market,\n    # interest parameters\n    kw_market = (interest_rate = 0.07,),\n    # function for updating inflation\n    update_inflation! = fixed_inflation,\n    # inflation parameters\n    kw_inflation = (inflation_rate = 0.035,),\n    # invest parameters\n    kw_invest = (investments = Transaction(; end_age = 60, amount = 625),),\n    # withdraw parameters \n    kw_withdraw = (withdraws = Transaction(; start_age = 60, amount = 2200),)\n)","category":"page"},{"location":"basic_example/#Construct-Model","page":"Basic Example","title":"Construct Model","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Now that the model settings have been configured, we can create the model. To do so, we will pass the configuration settings to the model constructor. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"model = Model(; config...)","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The output above summarizes the configuration of the Model object. At the bottom, the field config contains all of the parameters for the update functions. The remaining fields are global parameters, which include the starting amount and update functions. The field called state stores current values of the system for each time step, including investment amount, and net worth. You can see the details of the State object by expanding the menu below.","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"<details>\n<summary><b>Show State</b></summary>","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"model.state","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"</details>","category":"page"},{"location":"basic_example/#Setup-Logger","page":"Basic Example","title":"Setup Logger","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The next step is to initialize the data logger. On each time step, the data logger stores the following quantities: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"annualized interest rate\nannualized inflation rate\nnet worth\nincome summed across all sources","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The Logger object requires two inputs: ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"n_steps: the total number of time steps in one simulation\nn_reps: the total repetitions of the simulation. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The total number of time steps can be found by getting the length of the time steps. In this simple scenario, we will set n_reps=1 because the simulation is deterministic (i.e., it provides the same result each time). ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"times = get_times(model)\nn_steps = length(times)\nn_reps = 1\nlogger = Logger(; n_reps, n_steps)","category":"page"},{"location":"basic_example/#Run-Simulation","page":"Basic Example","title":"Run Simulation","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Now that we have specified the parameters of the simulation, we can use the function simulate! to generate quantities of interest and save them to the Logger object. As shown below, simulate! requires our Model object, Logger object, and the number of repetitions, n_reps. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"simulate!(model, logger, n_reps)","category":"page"},{"location":"basic_example/#Visualize-the-Results","page":"Basic Example","title":"Visualize the Results","text":"","category":"section"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"The code block below plots net worth as a function of age. The time steps are contained in times and net worth is contained within the Logger object. ","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"plot(times, logger.net_worth, grid=false, label=false, xlabel=\"Age\", ylabel=\"Net Worth\")","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"Based on the assumptions we have made, you will have $219,771 remaining in investments at age 85. Needless to say, this simulation is too simplistic stress test your financial situation. Perhaps the most significant limitation is that is deterministic: investments, withdraws, infation, and interest are fixed throughout. In actuality, these values vary across time, thus introducing uncertainty into the planning process. The advanced example will show you how to introduce random variables into the simulation to account for various sources of uncertainty.","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"<details>\n<summary><b>All Code</b></summary>","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"using RetirementPlanners\nusing Plots\n\nconfig = (\n    # time step in years\n    Δt = 1 / 12,\n    # starting age of simulation\n    start_age = 25,\n    # duration of simulation\n    duration = 58,\n    # initial investment amount \n    start_amount = 10_000,\n    # function for simulating growth in the market\n    update_market! = fixed_market,\n    # interest parameters\n    kw_market = (interest_rate = 0.07,),\n    # function for updating inflation\n    update_inflation! = fixed_inflation,\n    # inflation parameters\n    kw_inflation = (inflation_rate = 0.035,),\n    # invest parameters\n    kw_invest = (investments = Transaction(; end_age = 60, amount = 625),),\n    # withdraw parameters \n    kw_withdraw = (withdraws = Transaction(; start_age = 60, amount = 2200),)\n)\n\nmodel = Model(; config...)\n\ntimes = get_times(model)\nn_steps = length(times)\nn_reps = 1\nlogger = Logger(; n_reps, n_steps)\n\nsimulate!(model, logger, n_reps)\n\nplot(\n    times,\n    logger.net_worth,\n    grid = false,\n    label = false,\n    xlabel = \"Age\",\n    ylabel = \"Net Worth\"\n)","category":"page"},{"location":"basic_example/","page":"Basic Example","title":"Basic Example","text":"</details>","category":"page"}]
}
